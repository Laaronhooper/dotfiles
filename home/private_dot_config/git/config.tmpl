[user]
	name = Luke Hooper
	email = luke@canopusnet.com
[advice]
	addEmptyPathspec = false
	pushNonFastForward = false
	statusHints = false
[color]
	ui = auto
[core]
	; editor = nvim
	whitespace = trailing-space,space-before-tab
[diff]
	algorithm = histogram
	renamelimit = 8192
	renames = copies
[fetch]
	fsckobjects = false
	prune = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[gitget]
	root = ~/src
[help]
  autocorrect = 20
[init]
	defaultBranch = "main"
[pager]
	branch = false
	grep = false
[push]
	default = current
[rebase]
	autosquash = true
	autostash = true
[receive]
	fsckobjects = true
[status]
	submoduleSummary = true
[transfer]
	fsckobjects = true
[trim]
  bases = master,gh-pages
[url "git@bitbucket.org:"]
	insteadOf = https://bitbucket.org/
[url "git@github.com:laaronhooper/"]
	insteadOf = https://github.com/Laaronhooper/
{{- $ghPath := lookPath "gh" }}
{{- if $ghPath }}
[credential "https://github.com"]
	helper = !{{ $ghPath }} auth git-credential
[credential "https://gist.github.com"]
	helper = !{{ $ghPath }} auth git-credential
{{- end }}
{{/* vim: set filetype=gitconfig: */}}
[alias]
	a = add
	A = add .
	ap = add -p
	amc = am --continue
	ass = "!f() { git add . && git commit -m '.' && git push --force-with-lease && git reset --soft HEAD~1 && git commit --amend --no-edit --allow-empty && git push --force-with-lease; }; f" # add commit and self squash into previous commit
	b = branch
	bo = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"
	bm = branch --merged
	bnm = branch --no-merged
	bs = bisect start
	bsb = bisect bad
	bsg = bisect good
	c = clone
	ca = commit --amend
	cane = commit --amend --no-edit
	cf = commit --fixup
	cm = commit --message
  co = checkout
  conf = "!cat $HOME/.local/share/chezmoi/home/private_dot_config/git/config.tmpl"
  cob = "!f() { git rev-parse --verify $1 > /dev/null 2>&1 && git checkout $1 || git checkout -b $1; }; f" # checkout branch if available, else create branch
  com = checkout main
	cp = cherry-pick
	d = diff
	dc = diff --cached
  df = "!f() { git branch -D $1; git push origin --delete $1; git fetch --prune; git remote prune origin; }; f" # force deleting then pruning, locally and remotely
	dom = diff origin/main
  fd = "!f() { current_branch=$(git rev-parse --abbrev-ref HEAD); if [ $current_branch = $1 ]; then git checkout main; fi; git branch -D $1; git push origin --delete $1; git fetch --prune; git remote prune origin; }; f"
	fo = fetch origin
	fp = push --force-with-lease
  frh = !git fetch && git reset --hard FETCH_HEAD
	fu = "!git log -n 16 --pretty=format:'%h %s' --no-merges | fzf | cut -c -7 | xargs -o git commit --fixup"
	g = grep --line-number
	mbhom = merge-base HEAD origin/main
	mff = merge --ff-only
	ol = log --pretty=oneline
	l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	p = pull
	P = push
	pf = push --force-with-lease
	prb = pull --rebase
	r = restore
	ra = rebase --abort
	rc = rebase --continue
	ri = rebase --interactive
	rl = reflog
	ro = rebase --onto
  rbs = "!f() { echo fetching...; git fetch; if [ $? -eq 0 ]; then last_status=$(git status --untracked-files=no --porcelain); if [ \"$last_status\" != \"\" ]; then echo stashing local changes...; git stash; else echo nothing to stash...; fi; if [ $? -eq 0 ]; then echo rebasing...; git rebase; if [ $? -eq 0 ]; then if [ \"$last_status\" != \"\" ]; then echo applying stashed changes...; git stash pop; if [ $? -ne 0 ]; then echo STASH POP FAIL - you will need to resolve merge conflicts with git mergetool; fi; fi; else echo REBASE FAILED - you will need to manually run stash pop; fi; fi; fi; if [ $? -ne 0 ]; then echo ERROR: Operation failed; fi; }; f" # this function is designed to streamline the process of updating a local branch with changes from a remote branch while handling local uncommitted changes gracefully.
	riom = rebase --interactive origin/main
  riomo = rebase --interactive -X theirs main #rebases onto main, overideing main
	rpo = remote prune origin
	s = status -sb
	ss = commit --message snapshot --no-gpg-sign
  smp = !git stash && git switch main && git pull
	su = submodule update
	wd = diff --patience --word-diff
	change = codereview change
	gofmt = codereview gofmt
	mail = codereview mail
	pending = codereview pending
	submit = codereview submit
	sync = codereview sync
